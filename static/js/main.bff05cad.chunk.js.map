{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","buttonText","setButtonText","className","style","id","type","onClick","Navbar","props","mode","to","title","about","toggleMode","htmlFor","TextForm","text","setText","heading","onChange","event","console","log","target","value","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bff05cad.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle,setMyStyle] =  useState(\r\n        {\r\n            color: 'white',\r\n            backgroundColor: 'black'\r\n        }\r\n    ) \r\n\r\n    const [buttonText, setButtonText] = useState('Enable Dark Mode')\r\n\r\n    const toggleStyle = () => {\r\n        if (myStyle.color === 'white') {\r\n            setMyStyle({\r\n            color: 'black',\r\n            backgroundColor: 'white'\r\n            })\r\n            setButtonText('Enable Dark Mode');\r\n        }\r\n        else {\r\n            setMyStyle({\r\n            color: 'white',\r\n            backgroundColor: 'black'\r\n            })\r\n            setButtonText('Enable Light Mode');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container my-3\" style={myStyle}>\r\n            <h1>About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" >\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    Accordion Item #1\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item \" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    Accordion Item #2\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item \" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    Accordion Item #3\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <div className=\"container\">\r\n            <button className=\"btn btn-primary my-3\" type=\"button\" onClick={toggleStyle}>\r\n                {buttonText}\r\n            </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.about} </Link>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\">\r\n            <div className= {`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n             <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n             <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n            </div>\r\n            {/* <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button> */}\r\n          </form>\r\n        </div>\r\n      </div>\r\n          </nav>\r\n    \r\n  )\r\n  }\r\n\r\nexport default Navbar\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () => {\r\n        console.log('Upper case clicked' + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase\",\"success\");\r\n    }\r\n    const handleLowClick = () => {\r\n        console.log('Lower case clicked' + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase\",\"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        console.log('Text Cleared');\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\",\"success\");\r\n    }\r\n    const handleCopyClick = () => {\r\n        console.log('Text Copied');\r\n        let newText = document.getElementById('myBox');\r\n        newText.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text copied\",\"success\");\r\n    }\r\n    const handleSpaceClick = () => {\r\n        console.log('Extra Spaces Cleared');\r\n        let newText = text.split(/[ ] + /);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed\",\"success\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        console.log(\"Onchange\");\r\n        setText(event.target.value);\r\n    }\r\n    \r\n    const [text,setText] = useState('Enter text here');  \r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h1 className=\"my-3\">{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" style={{backgroundColor:props.mode==='dark'?'#343a40':'white', color:props.mode==='dark'?'white':'black'} } onChange={handleOnChange} value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n                Convert to Upperacase\r\n            </button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>\r\n                Convert to Lowercase\r\n            </button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n                CLEAR TEXT\r\n            </button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleCopyClick}>\r\n                COPY TEXT\r\n            </button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleSpaceClick}>\r\n                CLEAR EXTRA SPACES\r\n            </button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n            <h1>Your text summary</h1>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes will be  required to read</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0?text:\"Enter text to preview\"}</p>\r\n        </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show` }role=\"alert\">\r\n           <strong> {capitalize(props.alert.type)} : </strong>{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\nimport {useState} from 'react'\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n\n  const [mode, setMode] = useState('light'); \n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message,type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setAlert(null);\n    },1000)\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#445a70';\n      showAlert('Dark mode has been enabled','success');\n      document.title = 'TextUtilis - Dark Mode';\n      // setInterval(() => {\n      //   document.title = 'TextUtilis is amazing'\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = ' Install TextUtilis now!!'\n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode has been enabled','success');\n      document.title = 'TextUtilis - Light Mode';\n    }\n  }\n\n  return (\n    <div>\n      <Router>\n      <Navbar title=\"TextUtilis\" about=\"About TextUtils\" mode={mode} toggleMode={toggleMode}></Navbar>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        \n          <Switch>\n            <Route exact path=\"/\">\n              <TextForm showAlert={showAlert} heading=\"Enter text to analyze below\" mode={mode}></TextForm>\n            </Route>\n            <Route exact path=\"/about\">\n              <About/>\n            </Route>\n          </Switch>\n        \n      </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}